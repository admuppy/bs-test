yarn이란? facebook이 자바스크립트를 위해 2016년 개발한 패키지 시스템 

yarn 명령어셋은 package.json에 정의돼 있으며, 기본 명령어는 아래와 같다.

yarn install 사용하도록 설정한 플러그인들을 포함, 패키징에 앞서 필요한 파일 설치 - package.json에 설정된 모든 디펜던시를 node_modules에 설치
              --frozen-lockfile 옵션을 주면 yarn.lock 파일을 생성하지 않고, 업데이트가 필요한 경우 인스톨이 실패하게끔 한다.
              --offline 옵션은 오프라인모드로 인스톨 진행. 순수 로컬환경에서 패키징...을 할필요는 아마 없겠지만 참고
yarn tsc 패키징된 파일간의 설정 오류 및 문법 오류 검사
yarn dev or yarn start 패키징된 소프트웨어 실행 -> 실행 과정에서 로그가 뜨는데, tsc작업에서 잡히지 않은 오류도 상당히 많다는걸 직접 실행해보면 알 수 있다.

yarn build, yarn build:backend 등. packages 폴더 안의 내용을 패키징하는 작업 packages/backend/Dockerfile에 패키지가 파드에 올라가자 마자 실행되는 스크립트 관련 내용이 들어있다.
                                                                            packages/.../src 폴더에 주요 설정값들이 들어가며,
                                                                            packages/node_modules에 파드에 함께 들어갈 모듈들이 들어가며, 이 모듈들은 같은 폴더 내 package.json 파일로 제어됨


backstage root폴더의 구성은 아래와 같다.

app-config.local.yaml       -> 플러그인 추가 작업 후 생성, 로컬 변수를 지정해 사용한다.
app-config.yaml             -> 메인 설정 파일, 위에서 아래로 설정값을 읽어나가는데, 만약 잘못된 설정값이 중간에 들어있는 경우에 그 행 아랫줄을 몽땅 실행하지 않는 경우도 있다.
catalog-info.yaml
examples                    -> 로컬 템플릿 저장소, 이미지 패키징 대상에서 제외돼 있음.
node_modules                -> 설치에 필요한 패키지들의 정보가 들어있으며 package.json 파일에 필요한 디펜던시 버전 정보들이 기록돼 있음
packages                    -> yarn build 등의 명령을 통해 실질적으로 패키징이 이뤄지는 공간이 이 폴더 이하 내용이다.
plugins                     -> 기본 플러그인들을 제외한 다른 플러그인들을 설치할 경우 이곳에 파일이 들어온다.
tsconfig.json               -> TypeScript config
app-config.production.yaml  -> 기본 플러그인 추가 후 생성되는데, 
backstage.json              -> 백스테이지 버전정보
dist-types         
lerna.json                  -> 패키징 도구중 하나인 것으로 보임
package.json                -> nodejs버전을 포함해서 모든 필요한 종속성 버전과 yarn 명령어가 기입돼 있음. 루트폴더가 아닌 패키징 폴더 안의 package.json을 살펴보면 디펜던시와 dev디펜던시가 나뉘어져 있는데, dev디펜던시는 옵션 또는 예비로 가지고 들어가는 종속성 파일들로 보임.
playwright.config.ts  
README.md  
yarn.lock                   



이미지 생성까지의 과정

##ubuntu에 기본설치돼어 있지 않으므로 cmake부터 설치
apt-get install cmake

## nvm 및 노드 설치 - default alias를 변경할 필요는 없으나 간혹 1개 이상의 버전이 다른 nvm을 추가로 설치할 경우 패키징 돌리는 과정 등에서 기본으로 사용하는 nvm 버전이 변경될 수도 있으니 유의, 이 경우 다른 버전은 uninstall로 확실히 삭제하는 편이 좋다.
## 최신버전의 백스테이지는 노드 18~20버전을 쓰게끔 고정돼 있다.
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash

nvm install 18
nvm use 18

##백스테이지 저장소 클론, 깃버전 고정 후 npm 명령어를 이용해서 yarn 설치 -> yarn은 node버전을 변경하는 작업을 거칠 때마다 새로 설치해줘야 함.
git clone https://github.com/backstage/backstage.git
git checkout v1.13.2

npm install --global yarn
yarn set version 1.22.19


## 백스테이지 앱을 만드는 명령어, npx를 사용해서 플러그인도 아래와 같은 방식으로 생성한다. yarn 명령어 설명은 문서 상단 참조
npx @backstage/create-app@latest

----------------

yarn install
yarn tsc
yarn build:backend

## 이미지 생성을 위해 아래 패키지들을 사용했다.
apt install docker docker-buildx buildah

## yarn build:backend 로 패키징 작업을 거친 후 docker 이미지 생성, 태그는 넥서스의 docker hosted에 바로 저장하기 편리하게 만들었음
## 넥서스 푸시를 위해 로그인, 로그인을 위해 /etc/hosts 파일에 호스트명을 입력하고 그래도 안된다면 안전하지 않은 레지스트리 허용 옵션을 추가한 후 데몬을 재시작해 적용
docker image build . -f packages/backend/Dockerfile --tag nexus.egovp.cloud.go.kr:50000/jh-backstage:1.5.6
docker login nexus.egovp.cloud.go.kr:50000

##-> 로그인 안될시
vi /etc/docker/daemon.json

{

    "insecure-registries": ["nexus.egovp.cloud.go.kr:50000"]

}
systemctl restart dockrer.service

## 도커 이미지 푸시 후 바로 사용이 가능함
docker push nexus.egovp.cloud.go.kr:50000/jh-backstage:1.5.6
